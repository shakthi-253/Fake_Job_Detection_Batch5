import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

from src.data_preprocessing import clean_text, preprocess
from src.vectorization import vectorize_text
from src.utils import basic_check

def train_and_evaluate(data_path):
    # Load dataset
    df = pd.read_excel(data_path)
    basic_check(df)

    # Clean & preprocess text
    text_cols = ['title', 'description', 'requirements', 'company_profile', 'benefits', 'industry']
    existing_text_cols = [c for c in text_cols if c in df.columns]

    df[existing_text_cols] = df[existing_text_cols].astype(str).fillna('')
    df['text'] = df[existing_text_cols].agg(' ||| '.join, axis=1)
    df['cleaned'] = df['text'].apply(clean_text)
    df['processed'] = df['cleaned'].apply(preprocess)

    # Vectorize
    X, vectorizer = vectorize_text(df['processed'])
    y = df['label']

    # Split
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, stratify=y, random_state=42
    )

    # Train model
    model = LogisticRegression(max_iter=1000)
    model.fit(X_train, y_train)

    # Evaluate
    y_pred = model.predict(X_test)
    print("\nAccuracy:", accuracy_score(y_test, y_pred))
    print("\nClassification Report:\n", classification_report(y_test, y_pred))
    print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

    return model, vectorizer
  
model, vectorizer = train_and_evaluate(data_path)


